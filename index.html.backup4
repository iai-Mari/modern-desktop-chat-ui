<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>iAI™ - Your Personal AI Companion</title>
    <style>
        :root {
            --bg-primary: #1a1a1a;
            --bg-secondary: #2a2a2a;
            --bg-tertiary: #3a3a3a;
            --text-primary: #ffffff;
            --text-secondary: #cccccc;
            --text-muted: #888888;
            --accent: #ffffff;
            --accent-hover: #f0f0f0;
            --border: #3a3a3a;
            --chat-bg: #1a1a1a;
            --chat-input-bg: #2a2a2a;
        }

        [data-theme="light"] {
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --bg-tertiary: #e9ecef;
            --text-primary: #212529;
            --text-secondary: #495057;
            --text-muted: #6c757d;
            --accent: #000000;
            --accent-hover: #333333;
            --border: #dee2e6;
            --chat-bg: #ffffff;
            --chat-input-bg: #f8f9fa;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            height: 100vh;
            overflow: hidden;
            transition: all 0.3s ease;
            -webkit-app-region: no-drag;
        }

        .app-container {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 280px;
            background: #1a1a1a; /* Always dark */
            border-right: 1px solid #3a3a3a;
            display: flex;
            flex-direction: column;
        }

        .logo {
            padding: 25px 20px;
            border-bottom: 1px solid #3a3a3a;
            text-align: center;
            -webkit-app-region: drag; /* Make logo area draggable */
        }

        .logo h1 {
            font-size: 32px;
            font-weight: 300; /* Lighter weight for minimalist */
            color: #ffffff;
            letter-spacing: 2px;
        }

        .nav-section {
            padding: 20px 0;
        }

        .nav-title {
            padding: 0 20px 15px;
            font-size: 14px;
            font-weight: 400;
            color: #888888;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            cursor: pointer;
            transition: all 0.2s;
            border: none;
            background: none;
            color: #cccccc;
            width: 100%;
            text-align: left;
            font-size: 16px;
            font-weight: 400;
        }

        .nav-item:hover {
            background: #2a2a2a;
            color: #ffffff;
        }

        .nav-item.active {
            background: #ffffff;
            color: #000000;
        }

        .nav-item i {
            margin-right: 12px;
            width: 20px;
            font-size: 16px;
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: var(--bg-primary);
        }

        .header {
            padding: 20px 30px;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: var(--bg-secondary);
            -webkit-app-region: drag; /* Make header draggable */
        }

        .header h2 {
            font-size: 24px;
            font-weight: 300;
        }

        .header-controls {
            display: flex;
            align-items: center;
            gap: 15px;
            -webkit-app-region: no-drag; /* Make controls clickable */
        }

        .theme-toggle {
            background: transparent;
            border: 1px solid var(--border);
            color: var(--text-primary);
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
            font-weight: 300;
        }

        .theme-toggle:hover {
            background: var(--accent);
            color: var(--bg-primary);
        }

        .status {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #ffffff;
        }

        .status-dot.disconnected {
            background: #888888;
        }

        .settings-btn {
            background: transparent;
            border: 1px solid var(--border);
            color: var(--text-primary);
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
        }

        .settings-btn:hover {
            background: var(--accent);
            color: var(--bg-primary);
        }

        .content-area {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
            display: none;
            background: var(--chat-bg);
        }

        .content-area.active {
            display: block;
        }

        .welcome-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .welcome-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 24px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .welcome-card:hover {
            border-color: var(--accent);
            transform: translateY(-1px);
        }

        .welcome-card h3 {
            font-size: 18px;
            margin-bottom: 8px;
            color: var(--text-primary);
            font-weight: 400;
        }

        .welcome-card p {
            color: var(--text-secondary);
            font-size: 14px;
            font-weight: 300;
        }

        .chat-container {
            position: fixed;
            bottom: 0;
            left: 280px;
            right: 0;
            background: var(--chat-input-bg);
            border-top: 1px solid var(--border);
            padding: 20px;
        }

        .chat-input-container {
            display: flex;
            align-items: center;
            gap: 12px;
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: 25px;
            padding: 12px 20px;
        }

        .chat-input {
            flex: 1;
            background: none;
            border: none;
            color: var(--text-primary);
            font-size: 16px;
            outline: none;
        }

        .chat-input::placeholder {
            color: var(--text-muted);
        }

        .voice-controls {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .voice-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 1px solid var(--border);
            background: transparent;
            color: var(--text-primary);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

        .voice-btn:hover {
            background: var(--accent);
            color: var(--bg-primary);
        }

        .memory-stats {
            background: var(--bg-secondary);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid var(--border);
        }

        .memory-stats h3 {
            margin-bottom: 15px;
            color: var(--text-primary);
            font-weight: 400;
        }

        .stat-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 8px 0;
            border-bottom: 1px solid var(--border);
        }

        .stat-item:last-child {
            border-bottom: none;
        }

        .stat-value {
            font-weight: 400;
            color: var(--text-primary);
        }

        .memory-context {
            font-size: 12px;
            color: var(--text-muted);
            margin-top: 5px;
        }

        .facts-section {
            background: var(--bg-secondary);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid var(--border);
        }

        .facts-section h3 {
            margin-bottom: 15px;
            color: var(--text-primary);
            font-weight: 400;
        }

        .fact-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid var(--border);
        }

        .fact-item:last-child {
            border-bottom: none;
        }

        .fact-content {
            flex: 1;
        }

        .fact-subject {
            font-weight: 400;
            color: var(--text-primary);
            margin-bottom: 4px;
        }

        .fact-detail {
            font-size: 14px;
            color: var(--text-secondary);
        }

        .fact-actions {
            display: flex;
            gap: 8px;
        }

        .fact-btn {
            background: transparent;
            border: 1px solid var(--border);
            color: var(--text-muted);
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s;
        }

        .fact-btn:hover {
            background: var(--accent);
            color: var(--bg-primary);
        }

        .project-card, .task-card {
            background: var(--bg-secondary);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 15px;
            border: 1px solid var(--border);
        }

        .project-card h4, .task-card h4 {
            color: var(--text-primary);
            margin-bottom: 10px;
            font-weight: 400;
        }

        .btn-primary {
            background: var(--accent);
            color: var(--bg-primary);
            border: 1px solid var(--accent);
            padding: 12px 24px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 400;
            transition: all 0.2s;
        }

        .btn-primary:hover {
            background: transparent;
            color: var(--accent);
        }

        .notification-badge {
            background: var(--text-muted);
            color: var(--bg-primary);
            border-radius: 50%;
            width: 18px;
            height: 18px;
            font-size: 11px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: auto;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="logo">
                <h1>iAI</h1>
            </div>
            
            <div class="nav-section">
                <div class="nav-title">Navigation</div>
                <button class="nav-item active" data-tab="main">
                    <i>⌂</i> Main
                </button>
                <button class="nav-item" data-tab="memory">
                    <i>◉</i> Memory
                </button>
                <button class="nav-item" data-tab="projects">
                    <i>◫</i> Projects
                </button>
                <button class="nav-item" data-tab="tasks">
                    <i>☐</i> Tasks
                </button>
                <button class="nav-item" data-tab="chats">
                    <i>◐</i> Chats
                </button>
            </div>

            <div class="nav-section">
                <div class="nav-title">Resources</div>
                <button class="nav-item" data-tab="library">
                    <i>◈</i> Library
                    <span class="notification-badge">1</span>
                </button>
                <button class="nav-item" data-tab="notifications">
                    <i>◎</i> Notifications
                    <span class="notification-badge">1</span>
                </button>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <div class="header">
                <h2 id="page-title">Main</h2>
                <div class="header-controls">
                    <button class="theme-toggle" onclick="toggleTheme()">Light</button>
                    <div class="status">
                        <span class="status-dot" id="connection-dot"></span>
                        <span id="connection-status">Checking...</span>
                        <button class="settings-btn" onclick="testConnection()">Settings</button>
                    </div>
                </div>
            </div>

            <!-- Main Tab Content -->
            <div id="main-content" class="content-area active">
                <div style="text-align: center; margin-bottom: 40px;">
                    <h1 style="font-size: 48px; margin-bottom: 20px; font-weight: 300;">Hey there</h1>
                    <p style="font-size: 18px; color: var(--text-secondary); font-weight: 300;">I'm Jay, your AI companion. I can speak to you with my voice and listen when you talk.</p>
                </div>

                <div class="welcome-grid">
                    <div class="welcome-card" onclick="showMemoryStats()">
                        <h3>Meet Jay</h3>
                        <p>Learn about your AI companion</p>
                    </div>
                    <div class="welcome-card" onclick="showCapabilities()">
                        <h3>Capabilities</h3>
                        <p>Discover what Jay can do</p>
                    </div>
                    <div class="welcome-card" onclick="testVoice()">
                        <h3>Voice Test</h3>
                        <p>Hear Jay speak out loud</p>
                    </div>
                    <div class="welcome-card" onclick="startListening()">
                        <h3>Speech Input</h3>
                        <p>Learn about voice input</p>
                    </div>
                </div>
            </div>

            <!-- Memory Tab Content -->
            <div id="memory-content" class="content-area">
                <div class="memory-stats">
                    <h3>Memory Statistics</h3>
                    <div class="stat-item">
                        <span>Total Messages:</span>
                        <div>
                            <span class="stat-value" id="total-messages">Loading...</span>
                            <div class="memory-context">Conversations with Jay</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <span>Memory Size:</span>
                        <div>
                            <span class="stat-value" id="memory-size">Loading...</span>
                            <div class="memory-context" id="memory-context">of unlimited storage</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <span>Emotional Messages:</span>
                        <div>
                            <span class="stat-value" id="emotional-messages">Loading...</span>
                            <div class="memory-context">Messages with emotional context</div>
                        </div>
                    </div>
                </div>

                <div class="facts-section">
                    <h3>Facts About You</h3>
                    <div id="facts-list">
                        <p style="color: var(--text-muted); text-align: center; padding: 20px;">Loading facts...</p>
                    </div>
                </div>

                <button class="btn-primary" onclick="clearMemory()">Clear All Memory</button>
            </div>

            <!-- Projects Tab Content -->
            <div id="projects-content" class="content-area">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h3 style="font-weight: 400;">Your Projects</h3>
                    <button class="btn-primary" onclick="createProject()">New Project</button>
                </div>
                <div class="project-card">
                    <h4>iAI Development</h4>
                    <p>Building Jay's brain and memory system</p>
                    <small style="color: var(--text-muted);">Last updated: Today</small>
                </div>
            </div>

            <!-- Tasks Tab Content -->
            <div id="tasks-content" class="content-area">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h3 style="font-weight: 400;">Your Tasks</h3>
                    <button class="btn-primary" onclick="createTask()">New Task</button>
                </div>
                <div class="task-card">
                    <h4>Navigation System ✓</h4>
                    <p>Make the sidebar navigation functional</p>
                    <small style="color: var(--text-muted);">Status: Completed</small>
                </div>
                <div class="task-card">
                    <h4>Voice Features</h4>
                    <p>Implement speech-to-text and text-to-speech</p>
                    <small style="color: var(--text-muted);">Status: In Progress</small>
                </div>
            </div>

            <!-- Chats Tab Content -->
            <div id="chats-content" class="content-area">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h3 style="font-weight: 400;">Chat History</h3>
                    <button class="btn-primary" onclick="newChat()">New Chat</button>
                </div>
                <div id="chat-history">
                    <p style="color: var(--text-muted); text-align: center; margin-top: 50px;">Your chat conversations will appear here</p>
                </div>
            </div>

            <!-- Library Tab Content -->
            <div id="library-content" class="content-area">
                <h3 style="font-weight: 400;">Shared Library</h3>
                <p style="color: var(--text-muted); margin: 20px 0;">Files, images, and documents shared between you and Jay</p>
                <div style="border: 2px dashed var(--border); border-radius: 8px; padding: 40px; text-align: center; margin: 20px 0;">
                    <p style="color: var(--text-muted);">Drop files here or click to upload</p>
                </div>
            </div>

            <!-- Notifications Tab Content -->
            <div id="notifications-content" class="content-area">
                <h3 style="font-weight: 400;">Notifications</h3>
                <div class="project-card">
                    <h4>Navigation Fixed</h4>
                    <p>Your sidebar navigation is now working perfectly</p>
                    <small style="color: var(--text-muted);">Just now</small>
                </div>
                <div class="project-card">
                    <h4>Memory System Active</h4>
                    <p>Jay's smart memory system is learning about you</p>
                    <small style="color: var(--text-muted);">2 hours ago</small>
                </div>
            </div>
        </div>

        <!-- Chat Input -->
        <div class="chat-container">
            <div class="chat-input-container">
                <input type="text" class="chat-input" placeholder="Talk to Jay..." id="message-input">
                <div class="voice-controls">
                    <button class="voice-btn" onclick="toggleSpeaker()" title="Hear Jay speak">◐</button>
                    <button class="voice-btn" onclick="toggleMicrophone()" title="Speak to Jay">◉</button>
                    <button class="voice-btn" onclick="sendMessage()" title="Send message">▶</button>
                </div>
            </div>
            <div style="text-align: center; margin-top: 10px; font-size: 12px; color: var(--text-muted);">
                <span>Jay voice</span> • <span>You speak</span>
            </div>
        </div>
    </div>

    <script>
        // Theme management
        let isDarkMode = true;

        function toggleTheme() {
            isDarkMode = !isDarkMode;
            const body = document.body;
            const themeToggle = document.querySelector('.theme-toggle');
            
            if (isDarkMode) {
                body.removeAttribute('data-theme');
                themeToggle.textContent = 'Light';
            } else {
                body.setAttribute('data-theme', 'light');
                themeToggle.textContent = 'Dark';
            }
        }

        // Connection status management
        let isConnected = false;

        async function updateConnectionStatus() {
            try {
                const result = await window.electronAPI.testBrainConnection();
                isConnected = result.success;
                
                const dot = document.getElementById('connection-dot');
                const status = document.getElementById('connection-status');
                
                if (isConnected) {
                    dot.classList.remove('disconnected');
                    status.textContent = 'Connected';
                } else {
                    dot.classList.add('disconnected');
                    status.textContent = 'Disconnected';
                }
            } catch (error) {
                const dot = document.getElementById('connection-dot');
                const status = document.getElementById('connection-status');
                dot.classList.add('disconnected');
                status.textContent = 'Disconnected';
            }
        }

        // Navigation functionality
        document.addEventListener('DOMContentLoaded', function() {
            const navItems = document.querySelectorAll('.nav-item');
            const contentAreas = document.querySelectorAll('.content-area');
            const pageTitle = document.getElementById('page-title');

            // Update connection status on load
            updateConnectionStatus();

            navItems.forEach(item => {
                item.addEventListener('click', function() {
                    const targetTab = this.dataset.tab;
                    
                    // Hide all content areas
                    contentAreas.forEach(area => {
                        area.classList.remove('active');
                    });
                    
                    // Show target content area
                    const targetContent = document.getElementById(targetTab + '-content');
                    if (targetContent) {
                        targetContent.classList.add('active');
                    }
                    
                    // Update active nav item
                    navItems.forEach(nav => nav.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Update page title
                    pageTitle.textContent = this.textContent.replace(/[^\w\s]/gi, '').trim();
                    
                    // Load content for specific tabs
                    if (targetTab === 'memory') {
                        loadMemoryStats();
                        loadFacts();
                    } else if (targetTab === 'chats') {
                        loadChatHistory();
                    }
                });
            });
        });

        // Memory functions
        async function loadMemoryStats() {
            try {
                const stats = await window.electronAPI.getMemoryStats();
                document.getElementById('total-messages').textContent = stats.totalMessages || 0;
                document.getElementById('memory-size').textContent = stats.sizeFormatted || '0 B';
                document.getElementById('emotional-messages').textContent = stats.emotionalMessages || 0;
                
                // Add context for memory size
                const sizeInBytes = JSON.stringify(stats).length;
                let context = 'of unlimited storage';
                if (sizeInBytes > 1024 * 1024) {
                    context = `(${(sizeInBytes / (1024 * 1024)).toFixed(1)} MB used)`;
                } else if (sizeInBytes > 1024) {
                    context = `(${(sizeInBytes / 1024).toFixed(1)} KB used)`;
                }
                document.getElementById('memory-context').textContent = context;
                
            } catch (error) {
                console.error('Error loading memory stats:', error);
                document.getElementById('total-messages').textContent = 'Error';
                document.getElementById('memory-size').textContent = 'Error';
                document.getElementById('emotional-messages').textContent = 'Error';
            }
        }

        // Load facts from database
        async function loadFacts() {
            try {
                // This would connect to your facts table
                // For now, showing sample facts
                const factsList = document.getElementById('facts-list');
                
                // Sample facts - replace with real database call
                const sampleFacts = [
                    { subject: 'user', attribute: 'name', value: 'Mari' },
                    { subject: 'user', attribute: 'school', value: 'San Diego State University' },
                    { subject: 'user', attribute: 'breakfast', value: '2 scoops of protein and coffee' },
                    { subject: 'user', attribute: 'eye_color', value: 'hazel' },
                    { subject: 'user', attribute: 'reason_for_assistant_name', value: 'lost love, Julio' },
                ];
                
                if (sampleFacts.length > 0) {
                    factsList.innerHTML = sampleFacts.map((fact, index) => `
                        <div class="fact-item">
                            <div class="fact-content">
                                <div class="fact-subject">${fact.subject} ${fact.attribute}</div>
                                <div class="fact-detail">${fact.value}</div>
                            </div>
                            <div class="fact-actions">
                                <button class="fact-btn" onclick="editFact(${index})">Edit</button>
                                <button class="fact-btn" onclick="deleteFact(${index})">Delete</button>
                            </div>
                        </div>
                    `).join('');
                } else {
                    factsList.innerHTML = '<p style="color: var(--text-muted); text-align: center; padding: 20px;">No facts stored yet</p>';
                }
            } catch (error) {
                console.error('Error loading facts:', error);
                document.getElementById('facts-list').innerHTML = '<p style="color: var(--text-muted); text-align: center; padding: 20px;">Error loading facts</p>';
            }
        }

        function editFact(index) {
            alert('Edit fact feature coming soon!');
        }

        function deleteFact(index) {
            if (confirm('Are you sure you want to delete this fact?')) {
                alert('Delete fact feature coming soon!');
                // Reload facts after deletion
                loadFacts();
            }
        }

        async function clearMemory() {
            if (confirm('Are you sure you want to clear all memory? This cannot be undone.')) {
                try {
                    await window.electronAPI.clearMemory();
                    alert('Memory cleared successfully!');
                    loadMemoryStats();
                    loadFacts();
                } catch (error) {
                    alert('Error clearing memory: ' + error.message);
                }
            }
        }

        // Chat functions
        async function loadChatHistory() {
            try {
                const conversations = await window.electronAPI.getConversations();
                const chatHistory = document.getElementById('chat-history');
                
                if (conversations.conversations && conversations.conversations.length > 0) {
                    chatHistory.innerHTML = conversations.conversations.map(conv => `
                        <div class="project-card">
                            <h4>${conv.title}</h4>
                            <p>${conv.preview}</p>
                            <small style="color: var(--text-muted);">${new Date(conv.timestamp).toLocaleString()}</small>
                        </div>
                    `).join('');
                } else {
                    chatHistory.innerHTML = '<p style="color: var(--text-muted); text-align: center; margin-top: 50px;">No conversations yet. Start chatting with Jay!</p>';
                }
            } catch (error) {
                console.error('Error loading chat history:', error);
            }
        }

        // Voice functions
        function testVoice() {
            if ('speechSynthesis' in window) {
                const utterance = new SpeechSynthesisUtterance("Hey Mari! I'm Jay, your AI companion. Nice to meet you!");
                utterance.rate = 0.9;
                utterance.pitch = 1.0;
                speechSynthesis.speak(utterance);
            } else {
                alert('Speech synthesis not supported in this browser');
            }
        }

        function toggleSpeaker() {
            alert('Speaker mode activated! Jay will speak his responses.');
        }

        function toggleMicrophone() {
            if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
                recognition.continuous = false;
                recognition.interimResults = false;
                
                recognition.onresult = function(event) {
                    const transcript = event.results[0][0].transcript;
                    document.getElementById('message-input').value = transcript;
                };
                
                recognition.onerror = function(event) {
                    alert('Speech recognition error: ' + event.error);
                };
                
                recognition.start();
                alert('Listening... Speak now!');
            } else {
                alert('Speech recognition not supported in this browser');
            }
        }

        // Message sending
        async function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();
            
            if (!message) return;
            
            try {
                const response = await window.electronAPI.sendMessage({
                    message: message,
                    maxTokens: 300
                });
                
                if (response.success) {
                    // Clear input
                    input.value = '';
                    
                    // Show response (you can enhance this later)
                    alert('Jay: ' + response.response);
                    
                    // Optional: Make Jay speak the response
                    if ('speechSynthesis' in window) {
                        const utterance = new SpeechSynthesisUtterance(response.response);
                        speechSynthesis.speak(utterance);
                    }
                } else {
                    alert('Error: ' + response.error);
                }
            } catch (error) {
                alert('Error sending message: ' + error.message);
            }
        }

        // Enter key support
        document.getElementById('message-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Connection test
        async function testConnection() {
            try {
                const result = await window.electronAPI.testBrainConnection();
                alert(result.message);
                updateConnectionStatus(); // Update status after test
            } catch (error) {
                alert('Connection test failed: ' + error.message);
                updateConnectionStatus();
            }
        }

        // Placeholder functions for future features
        function showMemoryStats() {
            document.querySelector('[data-tab="memory"]').click();
        }

        function showCapabilities() {
            alert('Jay can:\n• Remember conversations\n• Learn your preferences\n• Speak and listen\n• Help with tasks\n• Manage projects');
        }

        function startListening() {
            toggleMicrophone();
        }

        function createProject() {
            const name = prompt('Enter project name:');
            if (name) {
                alert('Project "' + name + '" created! (Feature coming soon)');
            }
        }

        function createTask() {
            const task = prompt('Enter task description:');
            if (task) {
                alert('Task "' + task + '" created! (Feature coming soon)');
            }
        }

        function newChat() {
            alert('New chat started! (Feature coming soon)');
        }
    </script>
</body>
</html>
